!function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){"use strict";function e(t){var e=++d;return String(null==t?"rmjs-":t)+e}function i(t){var e=t.clone().css({height:"auto",width:t.width(),maxHeight:"none",overflow:"hidden"}).insertAfter(t),i=e.outerHeight(),o=parseInt(e.css({maxHeight:""}).css("max-height").replace(/[^-\d\.]/g,""),10),n=t.data("defaultHeight");e.remove();var a=o||t.data("collapsedHeight")||n;t.data({expandedHeight:i,maxHeight:o,collapsedHeight:a}).css({maxHeight:"none"})}function o(t){if(!r[t.selector]){var e=" ";t.embedCSS&&""!==t.blockCSS&&(e+=t.selector+" + [data-readmore-toggle], "+t.selector+"[data-readmore]{"+t.blockCSS+"}"),e+=t.selector+"[data-readmore]{transition: height "+t.speed+"ms;overflow: hidden;}",function(t,e){var i=t.createElement("style");i.type="text/css",i.styleSheet?i.styleSheet.cssText=e:i.appendChild(t.createTextNode(e)),t.getElementsByTagName("head")[0].appendChild(i)}(document,e),r[t.selector]=!0}}function n(e,i){this.element=e,this.options=t.extend({},s,i),o(this.options),this._defaults=s,this._name=a,this.init(),window.addEventListener?(window.addEventListener("load",h),window.addEventListener("resize",h)):(window.attachEvent("load",h),window.attachEvent("resize",h))}var a="readmore",s={speed:100,collapsedHeight:200,heightMargin:16,moreLink:'<a href="#">Read More</a>',lessLink:'<a href="#">Close</a>',embedCSS:!0,blockCSS:"display: block; width: 100%;",startOpen:!1,blockProcessed:function(){},beforeToggle:function(){},afterToggle:function(){}},r={},d=0,h=function(t,e,i){var o;return function(){var n=this,a=arguments,s=function(){o=null,i||t.apply(n,a)},r=i&&!o;clearTimeout(o),o=setTimeout(s,e),r&&t.apply(n,a)}}(function(){t("[data-readmore]").each(function(){var e=t(this),o="true"===e.attr("aria-expanded");i(e),e.css({height:e.data(o?"expandedHeight":"collapsedHeight")})})},100);n.prototype={init:function(){var o=t(this.element);o.data({defaultHeight:this.options.collapsedHeight,heightMargin:this.options.heightMargin}),i(o);var n=o.data("collapsedHeight"),a=o.data("heightMargin");if(o.outerHeight(!0)<=n+a)return this.options.blockProcessed&&"function"==typeof this.options.blockProcessed&&this.options.blockProcessed(o,!1),!0;var s=o.attr("id")||e(),r=this.options.startOpen?this.options.lessLink:this.options.moreLink;o.attr({"data-readmore":"","aria-expanded":this.options.startOpen,id:s}),o.after(t(r).on("click",function(t){return function(e){t.toggle(this,o[0],e)}}(this)).attr({"data-readmore-toggle":s,"aria-controls":s})),this.options.startOpen||o.css({height:n}),this.options.blockProcessed&&"function"==typeof this.options.blockProcessed&&this.options.blockProcessed(o,!0)},toggle:function(e,i,o){o&&o.preventDefault(),e||(e=t('[aria-controls="'+this.element.id+'"]')[0]),i||(i=this.element);var n=t(i),a="",s="",r=!1,d=n.data("collapsedHeight");n.height()<=d?(a=n.data("expandedHeight")+"px",s="lessLink",r=!0):(a=d,s="moreLink"),this.options.beforeToggle&&"function"==typeof this.options.beforeToggle&&this.options.beforeToggle(e,n,!r),n.css({height:a}),n.on("transitionend",function(i){return function(){i.options.afterToggle&&"function"==typeof i.options.afterToggle&&i.options.afterToggle(e,n,r),t(this).attr({"aria-expanded":r}).off("transitionend")}}(this)),t(e).replaceWith(t(this.options[s]).on("click",function(t){return function(e){t.toggle(this,i,e)}}(this)).attr({"data-readmore-toggle":n.attr("id"),"aria-controls":n.attr("id")}))},destroy:function(){t(this.element).each(function(){var e=t(this);e.attr({"data-readmore":null,"aria-expanded":null}).css({maxHeight:"",height:""}).next("[data-readmore-toggle]").remove(),e.removeData()})}},t.fn.readmore=function(e){var i=arguments,o=this.selector;return e=e||{},"object"==typeof e?this.each(function(){if(t.data(this,"plugin_"+a)){var i=t.data(this,"plugin_"+a);i.destroy.apply(i)}e.selector=o,t.data(this,"plugin_"+a,new n(this,e))}):"string"==typeof e&&"_"!==e[0]&&"init"!==e?this.each(function(){var o=t.data(this,"plugin_"+a);o instanceof n&&"function"==typeof o[e]&&o[e].apply(o,Array.prototype.slice.call(i,1))}):void 0}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWRtb3JlLmpzIl0sIm5hbWVzIjpbImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImpRdWVyeSIsIiQiLCJ1bmlxdWVJZCIsInByZWZpeCIsImlkIiwidW5pcXVlSWRDb3VudGVyIiwiU3RyaW5nIiwic2V0Qm94SGVpZ2h0cyIsImVsZW1lbnQiLCJlbCIsImNsb25lIiwiY3NzIiwiaGVpZ2h0Iiwid2lkdGgiLCJtYXhIZWlnaHQiLCJvdmVyZmxvdyIsImluc2VydEFmdGVyIiwiZXhwYW5kZWRIZWlnaHQiLCJvdXRlckhlaWdodCIsImNzc01heEhlaWdodCIsInBhcnNlSW50IiwicmVwbGFjZSIsImRlZmF1bHRIZWlnaHQiLCJkYXRhIiwicmVtb3ZlIiwiY29sbGFwc2VkSGVpZ2h0IiwiZW1iZWRDU1MiLCJvcHRpb25zIiwiY3NzRW1iZWRkZWQiLCJzZWxlY3RvciIsInN0eWxlcyIsImJsb2NrQ1NTIiwic3BlZWQiLCJkIiwidSIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJkb2N1bWVudCIsIlJlYWRtb3JlIiwidGhpcyIsImV4dGVuZCIsImRlZmF1bHRzIiwiX2RlZmF1bHRzIiwiX25hbWUiLCJyZWFkbW9yZSIsImluaXQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVzaXplQm94ZXMiLCJhdHRhY2hFdmVudCIsImhlaWdodE1hcmdpbiIsIm1vcmVMaW5rIiwibGVzc0xpbmsiLCJzdGFydE9wZW4iLCJibG9ja1Byb2Nlc3NlZCIsImJlZm9yZVRvZ2dsZSIsImFmdGVyVG9nZ2xlIiwiZnVuYyIsIndhaXQiLCJpbW1lZGlhdGUiLCJ0aW1lb3V0IiwiY29udGV4dCIsImFyZ3MiLCJhcmd1bWVudHMiLCJsYXRlciIsImFwcGx5IiwiY2FsbE5vdyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJlYWNoIiwiY3VycmVudCIsImlzRXhwYW5kZWQiLCJhdHRyIiwicHJvdG90eXBlIiwidXNlTGluayIsImRhdGEtcmVhZG1vcmUiLCJhcmlhLWV4cGFuZGVkIiwiYWZ0ZXIiLCJvbiIsIl90aGlzIiwiZXZlbnQiLCJ0b2dnbGUiLCJkYXRhLXJlYWRtb3JlLXRvZ2dsZSIsImFyaWEtY29udHJvbHMiLCJ0cmlnZ2VyIiwicHJldmVudERlZmF1bHQiLCIkZWxlbWVudCIsIm5ld0hlaWdodCIsIm5ld0xpbmsiLCJleHBhbmRlZCIsIm9mZiIsInJlcGxhY2VXaXRoIiwiZGVzdHJveSIsIm5leHQiLCJyZW1vdmVEYXRhIiwiZm4iLCJpbnN0YW5jZSIsIkFycmF5Iiwic2xpY2UiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQ0FhQyxTQUFTQSxHQUNjLGtCQUFYQyxTQUF5QkEsT0FBT0MsSUFFekNELFFBQVEsVUFBV0QsR0FDUyxnQkFBWkcsU0FFaEJDLE9BQU9ELFFBQVVILEVBQVFLLFFBQVEsV0FHakNMLEVBQVFNLFNBRVYsU0FBU0MsR0FDVCxZQTJDQSxTQUFTQyxHQUFTQyxHQUNoQixHQUFJQyxLQUFPQyxDQUVYLE9BQU9DLFFBQWlCLE1BQVZILEVBQWlCLFFBQVVBLEdBQVVDLEVBR3JELFFBQVNHLEdBQWNDLEdBQ3JCLEdBQUlDLEdBQUtELEVBQVFFLFFBQVFDLEtBQ25CQyxPQUFRLE9BQ1JDLE1BQU9MLEVBQVFLLFFBQ2ZDLFVBQVcsT0FDWEMsU0FBVSxXQUNUQyxZQUFZUixHQUNmUyxFQUFpQlIsRUFBR1MsY0FDcEJDLEVBQWVDLFNBQVNYLEVBQUdFLEtBQUtHLFVBQVcsS0FBS0gsSUFBSSxjQUFjVSxRQUFRLFlBQWEsSUFBSyxJQUM1RkMsRUFBZ0JkLEVBQVFlLEtBQUssZ0JBRWpDZCxHQUFHZSxRQUVILElBQUlDLEdBQWtCTixHQUFnQlgsRUFBUWUsS0FBSyxvQkFBc0JELENBR3pFZCxHQUFRZSxNQUNOTixlQUFnQkEsRUFDaEJILFVBQVdLLEVBQ1hNLGdCQUFpQkEsSUFHbEJkLEtBQ0NHLFVBQVcsU0FpQmYsUUFBU1ksR0FBU0MsR0FDaEIsSUFBTUMsRUFBWUQsRUFBUUUsVUFBVyxDQUNuQyxHQUFJQyxHQUFTLEdBRVRILEdBQVFELFVBQWlDLEtBQXJCQyxFQUFRSSxXQUM5QkQsR0FBVUgsRUFBUUUsU0FBVyw4QkFDM0JGLEVBQVFFLFNBQVcsbUJBQ2pCRixFQUFRSSxTQUNWLEtBSUpELEdBQVVILEVBQVFFLFNBQVcsc0NBQ0hGLEVBQVFLLE1BQVEsd0JBSXpDLFNBQVNDLEVBQUdDLEdBQ1gsR0FBSXZCLEdBQU1zQixFQUFFRSxjQUFjLFFBQzFCeEIsR0FBSXlCLEtBQU8sV0FFUHpCLEVBQUkwQixXQUNOMUIsRUFBSTBCLFdBQVdDLFFBQVVKLEVBR3pCdkIsRUFBSTRCLFlBQVlOLEVBQUVPLGVBQWVOLElBR25DRCxFQUFFUSxxQkFBcUIsUUFBUSxHQUFHRixZQUFZNUIsSUFDOUMrQixTQUFVWixHQUVaRixFQUFZRCxFQUFRRSxXQUFZLEdBSXBDLFFBQVNjLEdBQVNuQyxFQUFTbUIsR0FDekJpQixLQUFLcEMsUUFBVUEsRUFFZm9DLEtBQUtqQixRQUFVMUIsRUFBRTRDLFVBQVdDLEVBQVVuQixHQUV0Q0QsRUFBU2tCLEtBQUtqQixTQUVkaUIsS0FBS0csVUFBWUQsRUFDakJGLEtBQUtJLE1BQVFDLEVBRWJMLEtBQUtNLE9BR0RDLE9BQU9DLGtCQUVURCxPQUFPQyxpQkFBaUIsT0FBUUMsR0FDaENGLE9BQU9DLGlCQUFpQixTQUFVQyxLQUdsQ0YsT0FBT0csWUFBWSxPQUFRRCxHQUMzQkYsT0FBT0csWUFBWSxTQUFVRCxJQTlJakMsR0FBSUosR0FBVyxXQUNYSCxHQUNFZCxNQUFPLElBQ1BQLGdCQUFpQixJQUNqQjhCLGFBQWMsR0FDZEMsU0FBVSw0QkFDVkMsU0FBVSx3QkFDVi9CLFVBQVUsRUFDVkssU0FBVSwrQkFDVjJCLFdBQVcsRUFHWEMsZUFBZ0IsYUFDaEJDLGFBQWMsYUFDZEMsWUFBYSxjQUVmakMsS0FDQXZCLEVBQWtCLEVBeURsQmdELEVBdkRKLFNBQWtCUyxFQUFNQyxFQUFNQyxHQUM1QixHQUFJQyxFQUVKLE9BQU8sWUFDTCxHQUFJQyxHQUFVdEIsS0FBTXVCLEVBQU9DLFVBQ3ZCQyxFQUFRLFdBQ1ZKLEVBQVUsS0FDSkQsR0FDSkYsRUFBS1EsTUFBTUosRUFBU0MsSUFHcEJJLEVBQVVQLElBQWNDLENBRTVCTyxjQUFhUCxHQUNiQSxFQUFVUSxXQUFXSixFQUFPTixHQUV4QlEsR0FDRlQsRUFBS1EsTUFBTUosRUFBU0MsS0FzQ0MsV0FDekJsRSxFQUFFLG1CQUFtQnlFLEtBQUssV0FDeEIsR0FBSUMsR0FBVTFFLEVBQUUyQyxNQUNaZ0MsRUFBZ0QsU0FBbENELEVBQVFFLEtBQUssZ0JBRS9CdEUsR0FBY29FLEdBRWRBLEVBQVFoRSxLQUNOQyxPQUFRK0QsRUFBUXBELEtBQU9xRCxFQUFhLGlCQUFtQix3QkFHMUQsSUE4REhqQyxHQUFTbUMsV0FDUDVCLEtBQU0sV0FDSixHQUFJeUIsR0FBVTFFLEVBQUUyQyxLQUFLcEMsUUFFckJtRSxHQUFRcEQsTUFDTkQsY0FBZXNCLEtBQUtqQixRQUFRRixnQkFDNUI4QixhQUFjWCxLQUFLakIsUUFBUTRCLGVBRzdCaEQsRUFBY29FLEVBRWQsSUFBSWxELEdBQWtCa0QsRUFBUXBELEtBQUssbUJBQy9CZ0MsRUFBZW9CLEVBQVFwRCxLQUFLLGVBRWhDLElBQUlvRCxFQUFRekQsYUFBWSxJQUFTTyxFQUFrQjhCLEVBS2pELE1BSElYLE1BQUtqQixRQUFRZ0MsZ0JBQXlELGtCQUFoQ2YsTUFBS2pCLFFBQVFnQyxnQkFDckRmLEtBQUtqQixRQUFRZ0MsZUFBZWdCLEdBQVMsSUFFaEMsQ0FHUCxJQUFJdkUsR0FBS3VFLEVBQVFFLEtBQUssT0FBUzNFLElBQzNCNkUsRUFBVW5DLEtBQUtqQixRQUFRK0IsVUFBWWQsS0FBS2pCLFFBQVE4QixTQUFXYixLQUFLakIsUUFBUTZCLFFBRTVFbUIsR0FBUUUsTUFDTkcsZ0JBQWlCLEdBQ2pCQyxnQkFBaUJyQyxLQUFLakIsUUFBUStCLFVBQzlCdEQsR0FBTUEsSUFHUnVFLEVBQVFPLE1BQU1qRixFQUFFOEUsR0FDYkksR0FBRyxRQUFTLFNBQVVDLEdBQ3JCLE1BQU8sVUFBU0MsR0FDZEQsRUFBTUUsT0FBTzFDLEtBQU0rQixFQUFRLEdBQUlVLEtBRWhDekMsT0FDRmlDLE1BQ0NVLHVCQUF3Qm5GLEVBQ3hCb0YsZ0JBQWlCcEYsS0FHZndDLEtBQUtqQixRQUFRK0IsV0FDakJpQixFQUFRaEUsS0FDTkMsT0FBUWEsSUFJUm1CLEtBQUtqQixRQUFRZ0MsZ0JBQXlELGtCQUFoQ2YsTUFBS2pCLFFBQVFnQyxnQkFDckRmLEtBQUtqQixRQUFRZ0MsZUFBZWdCLEdBQVMsSUFLM0NXLE9BQVEsU0FBU0csRUFBU2pGLEVBQVM2RSxHQUM3QkEsR0FDRkEsRUFBTUssaUJBR0ZELElBQ0pBLEVBQVV4RixFQUFFLG1CQUFxQjJDLEtBQUtwQyxRQUFRSixHQUFLLE1BQU0sSUFHckRJLElBQ0pBLEVBQVVvQyxLQUFLcEMsUUFHakIsSUFBSW1GLEdBQVcxRixFQUFFTyxHQUNib0YsRUFBWSxHQUNaQyxFQUFVLEdBQ1ZDLEdBQVcsRUFDWHJFLEVBQWtCa0UsRUFBU3BFLEtBQUssa0JBRWhDb0UsR0FBUy9FLFVBQVlhLEdBQ3ZCbUUsRUFBWUQsRUFBU3BFLEtBQUssa0JBQW9CLEtBQzlDc0UsRUFBVSxXQUNWQyxHQUFXLElBR1hGLEVBQVluRSxFQUNab0UsRUFBVSxZQU1SakQsS0FBS2pCLFFBQVFpQyxjQUFxRCxrQkFBOUJoQixNQUFLakIsUUFBUWlDLGNBQ25EaEIsS0FBS2pCLFFBQVFpQyxhQUFhNkIsRUFBU0UsR0FBWUcsR0FHakRILEVBQVNoRixLQUFLQyxPQUFVZ0YsSUFHeEJELEVBQVNSLEdBQUcsZ0JBQWlCLFNBQVVDLEdBQ3JDLE1BQU8sWUFDREEsRUFBTXpELFFBQVFrQyxhQUFvRCxrQkFBOUJ1QixHQUFNekQsUUFBUWtDLGFBQ3BEdUIsRUFBTXpELFFBQVFrQyxZQUFZNEIsRUFBU0UsRUFBVUcsR0FHL0M3RixFQUFFMkMsTUFBTWlDLE1BQ05JLGdCQUFpQmEsSUFDaEJDLElBQUksbUJBRVJuRCxPQUVIM0MsRUFBRXdGLEdBQVNPLFlBQVkvRixFQUFFMkMsS0FBS2pCLFFBQVFrRSxJQUNuQ1YsR0FBRyxRQUFTLFNBQVVDLEdBQ25CLE1BQU8sVUFBU0MsR0FDZEQsRUFBTUUsT0FBTzFDLEtBQU1wQyxFQUFTNkUsS0FFN0J6QyxPQUNKaUMsTUFDQ1UsdUJBQXdCSSxFQUFTZCxLQUFLLE1BQ3RDVyxnQkFBaUJHLEVBQVNkLEtBQUssVUFJckNvQixRQUFTLFdBQ1BoRyxFQUFFMkMsS0FBS3BDLFNBQVNrRSxLQUFLLFdBQ25CLEdBQUlDLEdBQVUxRSxFQUFFMkMsS0FFaEIrQixHQUFRRSxNQUNORyxnQkFBaUIsS0FDakJDLGdCQUFpQixPQUVoQnRFLEtBQ0NHLFVBQVcsR0FDWEYsT0FBUSxLQUVUc0YsS0FBSywwQkFDTDFFLFNBRUhtRCxFQUFRd0IsaUJBTWRsRyxFQUFFbUcsR0FBR25ELFNBQVcsU0FBU3RCLEdBQ3ZCLEdBQUl3QyxHQUFPQyxVQUNQdkMsRUFBV2UsS0FBS2YsUUFJcEIsT0FGQUYsR0FBVUEsTUFFYSxnQkFBWkEsR0FDRmlCLEtBQUs4QixLQUFLLFdBQ2YsR0FBSXpFLEVBQUVzQixLQUFLcUIsS0FBTSxVQUFZSyxHQUFXLENBQ3RDLEdBQUlvRCxHQUFXcEcsRUFBRXNCLEtBQUtxQixLQUFNLFVBQVlLLEVBQ3hDb0QsR0FBU0osUUFBUTNCLE1BQU0rQixHQUd6QjFFLEVBQVFFLFNBQVdBLEVBRW5CNUIsRUFBRXNCLEtBQUtxQixLQUFNLFVBQVlLLEVBQVUsR0FBSU4sR0FBU0MsS0FBTWpCLE1BRzlCLGdCQUFaQSxJQUF1QyxNQUFmQSxFQUFRLElBQTBCLFNBQVpBLEVBQ3JEaUIsS0FBSzhCLEtBQUssV0FDZixHQUFJMkIsR0FBV3BHLEVBQUVzQixLQUFLcUIsS0FBTSxVQUFZSyxFQUNwQ29ELGFBQW9CMUQsSUFBeUMsa0JBQXRCMEQsR0FBUzFFLElBQ2xEMEUsRUFBUzFFLEdBQVMyQyxNQUFNK0IsRUFBVUMsTUFBTXhCLFVBQVV5QixNQUFNQyxLQUFLckMsRUFBTSxVQUpwRSIsImZpbGUiOiJyZWFkbW9yZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBwcmVzZXJ2ZVxuICpcbiAqIFJlYWRtb3JlLmpzIGpRdWVyeSBwbHVnaW5cbiAqIEF1dGhvcjogQGplZF9mb3N0ZXJcbiAqIFByb2plY3QgaG9tZTogaHR0cDovL2plZGZvc3Rlci5naXRodWIuaW8vUmVhZG1vcmUuanNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICpcbiAqIERlYm91bmNlIGZ1bmN0aW9uIGZyb20gaHR0cDovL2Rhdmlkd2Fsc2gubmFtZS9qYXZhc2NyaXB0LWRlYm91bmNlLWZ1bmN0aW9uXG4gKi9cblxuLyogZ2xvYmFsIGpRdWVyeSAqL1xuXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICBmYWN0b3J5KGpRdWVyeSk7XG4gIH1cbn0oZnVuY3Rpb24oJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHJlYWRtb3JlID0gJ3JlYWRtb3JlJyxcbiAgICAgIGRlZmF1bHRzID0ge1xuICAgICAgICBzcGVlZDogMTAwLFxuICAgICAgICBjb2xsYXBzZWRIZWlnaHQ6IDIwMCxcbiAgICAgICAgaGVpZ2h0TWFyZ2luOiAxNixcbiAgICAgICAgbW9yZUxpbms6ICc8YSBocmVmPVwiI1wiPlJlYWQgTW9yZTwvYT4nLFxuICAgICAgICBsZXNzTGluazogJzxhIGhyZWY9XCIjXCI+Q2xvc2U8L2E+JyxcbiAgICAgICAgZW1iZWRDU1M6IHRydWUsXG4gICAgICAgIGJsb2NrQ1NTOiAnZGlzcGxheTogYmxvY2s7IHdpZHRoOiAxMDAlOycsXG4gICAgICAgIHN0YXJ0T3BlbjogZmFsc2UsXG5cbiAgICAgICAgLy8gY2FsbGJhY2tzXG4gICAgICAgIGJsb2NrUHJvY2Vzc2VkOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICBiZWZvcmVUb2dnbGU6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgIGFmdGVyVG9nZ2xlOiBmdW5jdGlvbigpIHt9XG4gICAgICB9LFxuICAgICAgY3NzRW1iZWRkZWQgPSB7fSxcbiAgICAgIHVuaXF1ZUlkQ291bnRlciA9IDA7XG5cbiAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gICAgdmFyIHRpbWVvdXQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIGlmICghIGltbWVkaWF0ZSkge1xuICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcblxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuXG4gICAgICBpZiAoY2FsbE5vdykge1xuICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHtcbiAgICB2YXIgaWQgPSArK3VuaXF1ZUlkQ291bnRlcjtcblxuICAgIHJldHVybiBTdHJpbmcocHJlZml4ID09IG51bGwgPyAncm1qcy0nIDogcHJlZml4KSArIGlkO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0Qm94SGVpZ2h0cyhlbGVtZW50KSB7XG4gICAgdmFyIGVsID0gZWxlbWVudC5jbG9uZSgpLmNzcyh7XG4gICAgICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICAgICAgd2lkdGg6IGVsZW1lbnQud2lkdGgoKSxcbiAgICAgICAgICBtYXhIZWlnaHQ6ICdub25lJyxcbiAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgICAgfSkuaW5zZXJ0QWZ0ZXIoZWxlbWVudCksXG4gICAgICAgIGV4cGFuZGVkSGVpZ2h0ID0gZWwub3V0ZXJIZWlnaHQoKSxcbiAgICAgICAgY3NzTWF4SGVpZ2h0ID0gcGFyc2VJbnQoZWwuY3NzKHttYXhIZWlnaHQ6ICcnfSkuY3NzKCdtYXgtaGVpZ2h0JykucmVwbGFjZSgvW14tXFxkXFwuXS9nLCAnJyksIDEwKSxcbiAgICAgICAgZGVmYXVsdEhlaWdodCA9IGVsZW1lbnQuZGF0YSgnZGVmYXVsdEhlaWdodCcpO1xuXG4gICAgZWwucmVtb3ZlKCk7XG5cbiAgICB2YXIgY29sbGFwc2VkSGVpZ2h0ID0gY3NzTWF4SGVpZ2h0IHx8IGVsZW1lbnQuZGF0YSgnY29sbGFwc2VkSGVpZ2h0JykgfHwgZGVmYXVsdEhlaWdodDtcblxuICAgIC8vIFN0b3JlIG91ciBtZWFzdXJlbWVudHMuXG4gICAgZWxlbWVudC5kYXRhKHtcbiAgICAgIGV4cGFuZGVkSGVpZ2h0OiBleHBhbmRlZEhlaWdodCxcbiAgICAgIG1heEhlaWdodDogY3NzTWF4SGVpZ2h0LFxuICAgICAgY29sbGFwc2VkSGVpZ2h0OiBjb2xsYXBzZWRIZWlnaHRcbiAgICB9KVxuICAgIC8vIGFuZCBkaXNhYmxlIGFueSBgbWF4LWhlaWdodGAgcHJvcGVydHkgc2V0IGluIENTU1xuICAgIC5jc3Moe1xuICAgICAgbWF4SGVpZ2h0OiAnbm9uZSdcbiAgICB9KTtcbiAgfVxuXG4gIHZhciByZXNpemVCb3hlcyA9IGRlYm91bmNlKGZ1bmN0aW9uKCkge1xuICAgICQoJ1tkYXRhLXJlYWRtb3JlXScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3VycmVudCA9ICQodGhpcyksXG4gICAgICAgICAgaXNFeHBhbmRlZCA9IChjdXJyZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ3RydWUnKTtcblxuICAgICAgc2V0Qm94SGVpZ2h0cyhjdXJyZW50KTtcblxuICAgICAgY3VycmVudC5jc3Moe1xuICAgICAgICBoZWlnaHQ6IGN1cnJlbnQuZGF0YSggKGlzRXhwYW5kZWQgPyAnZXhwYW5kZWRIZWlnaHQnIDogJ2NvbGxhcHNlZEhlaWdodCcpIClcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LCAxMDApO1xuXG4gIGZ1bmN0aW9uIGVtYmVkQ1NTKG9wdGlvbnMpIHtcbiAgICBpZiAoISBjc3NFbWJlZGRlZFtvcHRpb25zLnNlbGVjdG9yXSkge1xuICAgICAgdmFyIHN0eWxlcyA9ICcgJztcblxuICAgICAgaWYgKG9wdGlvbnMuZW1iZWRDU1MgJiYgb3B0aW9ucy5ibG9ja0NTUyAhPT0gJycpIHtcbiAgICAgICAgc3R5bGVzICs9IG9wdGlvbnMuc2VsZWN0b3IgKyAnICsgW2RhdGEtcmVhZG1vcmUtdG9nZ2xlXSwgJyArXG4gICAgICAgICAgb3B0aW9ucy5zZWxlY3RvciArICdbZGF0YS1yZWFkbW9yZV17JyArXG4gICAgICAgICAgICBvcHRpb25zLmJsb2NrQ1NTICtcbiAgICAgICAgICAnfSc7XG4gICAgICB9XG5cbiAgICAgIC8vIEluY2x1ZGUgdGhlIHRyYW5zaXRpb24gQ1NTIGV2ZW4gaWYgZW1iZWRDU1MgaXMgZmFsc2VcbiAgICAgIHN0eWxlcyArPSBvcHRpb25zLnNlbGVjdG9yICsgJ1tkYXRhLXJlYWRtb3JlXXsnICtcbiAgICAgICAgJ3RyYW5zaXRpb246IGhlaWdodCAnICsgb3B0aW9ucy5zcGVlZCArICdtczsnICtcbiAgICAgICAgJ292ZXJmbG93OiBoaWRkZW47JyArXG4gICAgICAnfSc7XG5cbiAgICAgIChmdW5jdGlvbihkLCB1KSB7XG4gICAgICAgIHZhciBjc3MgPSBkLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIGNzcy50eXBlID0gJ3RleHQvY3NzJztcblxuICAgICAgICBpZiAoY3NzLnN0eWxlU2hlZXQpIHtcbiAgICAgICAgICBjc3Muc3R5bGVTaGVldC5jc3NUZXh0ID0gdTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjc3MuYXBwZW5kQ2hpbGQoZC5jcmVhdGVUZXh0Tm9kZSh1KSk7XG4gICAgICAgIH1cblxuICAgICAgICBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoY3NzKTtcbiAgICAgIH0oZG9jdW1lbnQsIHN0eWxlcykpO1xuXG4gICAgICBjc3NFbWJlZGRlZFtvcHRpb25zLnNlbGVjdG9yXSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gUmVhZG1vcmUoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgZW1iZWRDU1ModGhpcy5vcHRpb25zKTtcblxuICAgIHRoaXMuX2RlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgdGhpcy5fbmFtZSA9IHJlYWRtb3JlO1xuXG4gICAgdGhpcy5pbml0KCk7XG5cbiAgICAvLyBJRTggY2hva2VzIG9uIGB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcmAsIHNvIG5lZWQgdG8gdGVzdCBmb3Igc3VwcG9ydC5cbiAgICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIC8vIE5lZWQgdG8gcmVzaXplIGJveGVzIHdoZW4gdGhlIHBhZ2UgaGFzIGZ1bGx5IGxvYWRlZC5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgcmVzaXplQm94ZXMpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUJveGVzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoJ2xvYWQnLCByZXNpemVCb3hlcyk7XG4gICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoJ3Jlc2l6ZScsIHJlc2l6ZUJveGVzKTtcbiAgICB9XG4gIH1cblxuXG4gIFJlYWRtb3JlLnByb3RvdHlwZSA9IHtcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gJCh0aGlzLmVsZW1lbnQpO1xuXG4gICAgICBjdXJyZW50LmRhdGEoe1xuICAgICAgICBkZWZhdWx0SGVpZ2h0OiB0aGlzLm9wdGlvbnMuY29sbGFwc2VkSGVpZ2h0LFxuICAgICAgICBoZWlnaHRNYXJnaW46IHRoaXMub3B0aW9ucy5oZWlnaHRNYXJnaW5cbiAgICAgIH0pO1xuXG4gICAgICBzZXRCb3hIZWlnaHRzKGN1cnJlbnQpO1xuXG4gICAgICB2YXIgY29sbGFwc2VkSGVpZ2h0ID0gY3VycmVudC5kYXRhKCdjb2xsYXBzZWRIZWlnaHQnKSxcbiAgICAgICAgICBoZWlnaHRNYXJnaW4gPSBjdXJyZW50LmRhdGEoJ2hlaWdodE1hcmdpbicpO1xuXG4gICAgICBpZiAoY3VycmVudC5vdXRlckhlaWdodCh0cnVlKSA8PSBjb2xsYXBzZWRIZWlnaHQgKyBoZWlnaHRNYXJnaW4pIHtcbiAgICAgICAgLy8gVGhlIGJsb2NrIGlzIHNob3J0ZXIgdGhhbiB0aGUgbGltaXQsIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byB0cnVuY2F0ZSBpdC5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ibG9ja1Byb2Nlc3NlZCAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLmJsb2NrUHJvY2Vzc2VkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmJsb2NrUHJvY2Vzc2VkKGN1cnJlbnQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgaWQgPSBjdXJyZW50LmF0dHIoJ2lkJykgfHwgdW5pcXVlSWQoKSxcbiAgICAgICAgICAgIHVzZUxpbmsgPSB0aGlzLm9wdGlvbnMuc3RhcnRPcGVuID8gdGhpcy5vcHRpb25zLmxlc3NMaW5rIDogdGhpcy5vcHRpb25zLm1vcmVMaW5rO1xuXG4gICAgICAgIGN1cnJlbnQuYXR0cih7XG4gICAgICAgICAgJ2RhdGEtcmVhZG1vcmUnOiAnJyxcbiAgICAgICAgICAnYXJpYS1leHBhbmRlZCc6IHRoaXMub3B0aW9ucy5zdGFydE9wZW4sXG4gICAgICAgICAgJ2lkJzogaWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY3VycmVudC5hZnRlcigkKHVzZUxpbmspXG4gICAgICAgICAgLm9uKCdjbGljaycsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgIF90aGlzLnRvZ2dsZSh0aGlzLCBjdXJyZW50WzBdLCBldmVudCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pKHRoaXMpKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdkYXRhLXJlYWRtb3JlLXRvZ2dsZSc6IGlkLFxuICAgICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiBpZFxuICAgICAgICAgIH0pKTtcblxuICAgICAgICBpZiAoISB0aGlzLm9wdGlvbnMuc3RhcnRPcGVuKSB7XG4gICAgICAgICAgY3VycmVudC5jc3Moe1xuICAgICAgICAgICAgaGVpZ2h0OiBjb2xsYXBzZWRIZWlnaHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmxvY2tQcm9jZXNzZWQgJiYgdHlwZW9mIHRoaXMub3B0aW9ucy5ibG9ja1Byb2Nlc3NlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5ibG9ja1Byb2Nlc3NlZChjdXJyZW50LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICB0b2dnbGU6IGZ1bmN0aW9uKHRyaWdnZXIsIGVsZW1lbnQsIGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCEgdHJpZ2dlcikge1xuICAgICAgICB0cmlnZ2VyID0gJCgnW2FyaWEtY29udHJvbHM9XCInICsgdGhpcy5lbGVtZW50LmlkICsgJ1wiXScpWzBdO1xuICAgICAgfVxuXG4gICAgICBpZiAoISBlbGVtZW50KSB7XG4gICAgICAgIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHZhciAkZWxlbWVudCA9ICQoZWxlbWVudCksXG4gICAgICAgICAgbmV3SGVpZ2h0ID0gJycsXG4gICAgICAgICAgbmV3TGluayA9ICcnLFxuICAgICAgICAgIGV4cGFuZGVkID0gZmFsc2UsXG4gICAgICAgICAgY29sbGFwc2VkSGVpZ2h0ID0gJGVsZW1lbnQuZGF0YSgnY29sbGFwc2VkSGVpZ2h0Jyk7XG5cbiAgICAgIGlmICgkZWxlbWVudC5oZWlnaHQoKSA8PSBjb2xsYXBzZWRIZWlnaHQpIHtcbiAgICAgICAgbmV3SGVpZ2h0ID0gJGVsZW1lbnQuZGF0YSgnZXhwYW5kZWRIZWlnaHQnKSArICdweCc7XG4gICAgICAgIG5ld0xpbmsgPSAnbGVzc0xpbmsnO1xuICAgICAgICBleHBhbmRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbmV3SGVpZ2h0ID0gY29sbGFwc2VkSGVpZ2h0O1xuICAgICAgICBuZXdMaW5rID0gJ21vcmVMaW5rJztcbiAgICAgIH1cblxuICAgICAgLy8gRmlyZSBiZWZvcmVUb2dnbGUgY2FsbGJhY2tcbiAgICAgIC8vIFNpbmNlIHdlIGRldGVybWluZWQgdGhlIG5ldyBcImV4cGFuZGVkXCIgc3RhdGUgYWJvdmUgd2UncmUgbm93IG91dCBvZiBzeW5jXG4gICAgICAvLyB3aXRoIG91ciB0cnVlIGN1cnJlbnQgc3RhdGUsIHNvIHdlIG5lZWQgdG8gZmxpcCB0aGUgdmFsdWUgb2YgYGV4cGFuZGVkYFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5iZWZvcmVUb2dnbGUgJiYgdHlwZW9mIHRoaXMub3B0aW9ucy5iZWZvcmVUb2dnbGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmJlZm9yZVRvZ2dsZSh0cmlnZ2VyLCAkZWxlbWVudCwgISBleHBhbmRlZCk7XG4gICAgICB9XG5cbiAgICAgICRlbGVtZW50LmNzcyh7J2hlaWdodCc6IG5ld0hlaWdodH0pO1xuXG4gICAgICAvLyBGaXJlIGFmdGVyVG9nZ2xlIGNhbGxiYWNrXG4gICAgICAkZWxlbWVudC5vbigndHJhbnNpdGlvbmVuZCcsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuYWZ0ZXJUb2dnbGUgJiYgdHlwZW9mIF90aGlzLm9wdGlvbnMuYWZ0ZXJUb2dnbGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIF90aGlzLm9wdGlvbnMuYWZ0ZXJUb2dnbGUodHJpZ2dlciwgJGVsZW1lbnQsIGV4cGFuZGVkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBleHBhbmRlZFxuICAgICAgICAgIH0pLm9mZigndHJhbnNpdGlvbmVuZCcpO1xuICAgICAgICB9XG4gICAgICB9KSh0aGlzKSk7XG5cbiAgICAgICQodHJpZ2dlcikucmVwbGFjZVdpdGgoJCh0aGlzLm9wdGlvbnNbbmV3TGlua10pXG4gICAgICAgIC5vbignY2xpY2snLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICBfdGhpcy50b2dnbGUodGhpcywgZWxlbWVudCwgZXZlbnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KSh0aGlzKSlcbiAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICdkYXRhLXJlYWRtb3JlLXRvZ2dsZSc6ICRlbGVtZW50LmF0dHIoJ2lkJyksXG4gICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiAkZWxlbWVudC5hdHRyKCdpZCcpXG4gICAgICAgIH0pKTtcbiAgICB9LFxuXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAkKHRoaXMuZWxlbWVudCkuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSAkKHRoaXMpO1xuXG4gICAgICAgIGN1cnJlbnQuYXR0cih7XG4gICAgICAgICAgJ2RhdGEtcmVhZG1vcmUnOiBudWxsLFxuICAgICAgICAgICdhcmlhLWV4cGFuZGVkJzogbnVsbFxuICAgICAgICB9KVxuICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgbWF4SGVpZ2h0OiAnJyxcbiAgICAgICAgICAgIGhlaWdodDogJydcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5uZXh0KCdbZGF0YS1yZWFkbW9yZS10b2dnbGVdJylcbiAgICAgICAgICAucmVtb3ZlKCk7XG5cbiAgICAgICAgY3VycmVudC5yZW1vdmVEYXRhKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cblxuICAkLmZuLnJlYWRtb3JlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgkLmRhdGEodGhpcywgJ3BsdWdpbl8nICsgcmVhZG1vcmUpKSB7XG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gJC5kYXRhKHRoaXMsICdwbHVnaW5fJyArIHJlYWRtb3JlKTtcbiAgICAgICAgICBpbnN0YW5jZS5kZXN0cm95LmFwcGx5KGluc3RhbmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuICAgICAgICAkLmRhdGEodGhpcywgJ3BsdWdpbl8nICsgcmVhZG1vcmUsIG5ldyBSZWFkbW9yZSh0aGlzLCBvcHRpb25zKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnICYmIG9wdGlvbnNbMF0gIT09ICdfJyAmJiBvcHRpb25zICE9PSAnaW5pdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSAkLmRhdGEodGhpcywgJ3BsdWdpbl8nICsgcmVhZG1vcmUpO1xuICAgICAgICBpZiAoaW5zdGFuY2UgaW5zdGFuY2VvZiBSZWFkbW9yZSAmJiB0eXBlb2YgaW5zdGFuY2Vbb3B0aW9uc10gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBpbnN0YW5jZVtvcHRpb25zXS5hcHBseShpbnN0YW5jZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbn0pKTtcbiJdfQ==
